version: 6.5.0

type: DeclarativeSource

check:
  type: CheckStream
  stream_names:
    - orders

definitions:
  authenticator:
    type: CustomAuthenticator
    class_name: source_amazon_seller_partner.components.auth.AmazonSPOauthAuthenticator
    client_id: "{{ config['lwa_app_id'] }}"
    client_secret: "{{ config['lwa_client_secret'] }}"
    refresh_token: "{{ config['refresh_token'] }}"
    token_refresh_endpoint: "https://api.amazon.com/auth/o2/token"
    host: "{{ config['endpoint'].replace('https://', '') }}"


  base_requester:
    type: HttpRequester
    url_base: "{{ config['endpoint'] }}"
    authenticator: "#/definitions/authenticator"
    request_headers:
      Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'

  streams:
    orders:
      type: DeclarativeStream
      name: Orders
      primary_key:
        - AmazonOrderId
      ignore_stream_slicer_parameters_on_paginated_requests: true
      incremental_sync:
        type: DatetimeBasedCursor
        cursor_field: LastUpdateDate
        cursor_datetime_formats:
          - "%Y-%m-%dT%H:%M:%SZ"
        datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        start_datetime:
          type: MinMaxDatetime
          datetime: "{{ format_datetime(config['replication_start_date'], '%Y-%m-%dT%H:%M:%SZ') }}"
          datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        end_datetime:
          type: MinMaxDatetime
          datetime: "{{ format_datetime(config.get('replication_end_date', now_utc() - duration('PT2M') ), '%Y-%m-%dT%H:%M:%SZ') }}"
          datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        start_time_option:
          field_name: LastUpdatedAfter
          inject_into: request_parameter
        end_time_option:
          field_name: LastUpdatedBefore
          inject_into: request_parameter
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: "orders/v0/orders"
          http_method: GET
          request_headers:
            content-type: "application/json"
          request_parameters:
            MarketplaceIds: '{{ config["marketplace_id"] }}'
          error_handler:
            type: CompositeErrorHandler
            error_handlers:
              - type: DefaultErrorHandler
                backoff_strategies:
                  - class_name: "source_amazon_seller_partner.components.backoff_strategy.AmazonSPWaitTimeFromHeaderBackoffStrategy"
                    type: CustomBackoffStrategy
                    header: x-amzn-RateLimit-Limit
                    default_backoff_time: 60
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["payload", "Orders"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: request_parameter
            field_name: NextToken
          page_size_option:
            type: RequestOption
            inject_into: request_parameter
            field_name: MaxResultsPerPage
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.nextToken }}"

    order_items:
      type: DeclarativeStream
      name: OrderItems
      primary_key:
        - OrderItemId
      ignore_stream_slicer_parameters_on_paginated_requests: true
      incremental_sync:
        type: DatetimeBasedCursor
        cursor_field: LastUpdateDate
        cursor_datetime_formats:
          - "%Y-%m-%dT%H:%M:%SZ"
        datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        start_datetime:
          type: MinMaxDatetime
          datetime: "{{ format_datetime(config['replication_start_date'], '%Y-%m-%dT%H:%M:%SZ') }}"
          datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        end_datetime:
          type: MinMaxDatetime
          datetime: "{{ format_datetime(config.get('replication_end_date', now_utc() - duration('PT2M') ), '%Y-%m-%dT%H:%M:%SZ') }}"
          datetime_format: "%Y-%m-%dT%H:%M:%SZ"
      transformations:
        - type: AddFields
          fields:
            - path: [ "AmazonOrderId" ]
              value: "{{ stream_slice['AmazonOrderId'] }}"
        - type: AddFields
          fields:
            - path: [ "LastUpdateDate" ]
              value: '{{ stream_slice.extra_fields["LastUpdateDate"] }}'
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: "orders/v0/orders/{{ stream_slice['AmazonOrderId'] }}/orderItems"
          http_method: GET
          request_headers:
            content-type: "application/json"
          error_handler:
            type: CompositeErrorHandler
            error_handlers:
              - type: DefaultErrorHandler
                backoff_strategies:
                  - class_name: "source_amazon_seller_partner.components.backoff_strategy.AmazonSPWaitTimeFromHeaderBackoffStrategy"
                    type: CustomBackoffStrategy
                    header: x-amzn-RateLimit-Limit
                    default_backoff_time: 10
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "AmazonOrderId"
              stream: "#/definitions/streams/orders"
              partition_field: "AmazonOrderId"
              extra_fields:
                - [ "LastUpdateDate" ]
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["payload"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: request_parameter
            field_name: NextToken
          page_size_option:
            type: RequestOption
            inject_into: request_parameter
            field_name: MaxResultsPerPage
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.payload.NextToken }}"
# FinanceStream
    list_financial_event_groups:
      type: DeclarativeStream
      name: ListFinancialEventGroups
      primary_key:
        - FinancialEventGroupId
      ignore_stream_slicer_parameters_on_paginated_requests: false
      incremental_sync:
        type: DatetimeBasedCursor
        cursor_field: FinancialEventGroupStart
        cursor_datetime_formats:
          - "%Y-%m-%dT%H:%M:%SZ"
        datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        start_datetime:
          type: MinMaxDatetime
          # start date and end date should not be more than 180 days apart.
          datetime: "{{ format_datetime(config.get('replication_start_date', now_utc() - duration('P180D')  ), '%Y-%m-%dT%H:%M:%SZ') }}"
          datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        end_datetime:
          type: MinMaxDatetime
          datetime: "{{ format_datetime(config.get('replication_end_date', now_utc() - duration('PT5M') ), '%Y-%m-%dT%H:%M:%SZ') }}"
          datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        start_time_option:
          field_name: FinancialEventGroupStartedAfter
          inject_into: request_parameter
        end_time_option:
          field_name: FinancialEventGroupStartedBefore
          inject_into: request_parameter

      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: "finances/v0/financialEventGroups"
          http_method: GET
          request_headers:
            content-type: "application/json"
          error_handler:
            type: CompositeErrorHandler
            error_handlers:
              - type: DefaultErrorHandler
                backoff_strategies:
                  - class_name: "source_amazon_seller_partner.components.backoff_strategy.AmazonSPWaitTimeFromHeaderBackoffStrategy"
                    type: CustomBackoffStrategy
                    header: x-amzn-RateLimit-Limit
                    default_backoff_time: 60
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: [ "payload", "FinancialEventGroupList" ]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: request_parameter
            field_name: NextToken
          page_size_option:
            type: RequestOption
            inject_into: request_parameter
            field_name: MaxResultsPerPage
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.payload.NextToken }}"
    list_financial_events:
      type: DeclarativeStream
      name: ListFinancialEvents
      primary_key:
        - FinancialEventGroupId
      ignore_stream_slicer_parameters_on_paginated_requests: false
      incremental_sync:
        type: DatetimeBasedCursor
        cursor_field: PostedBefore
        cursor_datetime_formats:
          - "%Y-%m-%dT%H:%M:%SZ"
        datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        start_datetime:
          type: MinMaxDatetime
          # start date and end date should not be more than 180 days apart.
          datetime: "{{ format_datetime(config.get('replication_start_date', now_utc() - duration('P180D')  ), '%Y-%m-%dT%H:%M:%SZ') }}"
          datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        end_datetime:
          type: MinMaxDatetime
          datetime: "{{ format_datetime(config.get('replication_end_date', now_utc() - duration('PT5M') ), '%Y-%m-%dT%H:%M:%SZ') }}"
          datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        start_time_option:
          field_name: PostedAfter
          inject_into: request_parameter
        end_time_option:
          field_name: PostedBefore
          inject_into: request_parameter
      transformations:
        - type: AddFields
          fields:
            - path: [ "PostedBefore" ]
              value: "{{ stream_slice['end_time'] }}"
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: "finances/v0/financialEvents"
          http_method: GET
          request_headers:
            content-type: "application/json"
          error_handler:
            type: CompositeErrorHandler
            error_handlers:
              - type: DefaultErrorHandler
                backoff_strategies:
                  - class_name: "source_amazon_seller_partner.components.backoff_strategy.AmazonSPWaitTimeFromHeaderBackoffStrategy"
                    type: CustomBackoffStrategy
                    header: x-amzn-RateLimit-Limit
                    default_backoff_time: 60
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: [ "payload", "FinancialEvents" ]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: request_parameter
            field_name: NextToken
          page_size_option:
            type: RequestOption
            inject_into: request_parameter
            field_name: MaxResultsPerPage
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.payload.NextToken }}"

    get_flat_file_all_orders_data_by_order_date_general:
      type: DeclarativeStream
      name: GET_FLAT_FILE_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL
      primary_key: ["amazon-order-id"]
      incremental_sync:
        type: DatetimeBasedCursor
        cursor_field: last-updated-date
        cursor_datetime_formats:
          - "%Y-%m-%dT%H:%M:%SZ"
        datetime_format: "%Y-%m-%dT%H:%M:%SZ"
#        replication_start_date_limit_in_days = 30
        step: "P{{ min( config.get('period_in_days', 365), 30 ) }}D"
        cursor_granularity: "PT1S"
        start_datetime:
          type: MinMaxDatetime
          datetime: "{{ format_datetime(config['replication_start_date'], '%Y-%m-%dT%H:%M:%SZ') }}"
          datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        end_datetime:
          type: MinMaxDatetime
          datetime: "{{ format_datetime(config.get('replication_end_date', now_utc() - duration('PT2M') ), '%Y-%m-%dT%H:%M:%SZ') }}"
          datetime_format: "%Y-%m-%dT%H:%M:%SZ"

      retriever:
        $ref: "#/definitions/basic_async_retriever"
        creation_requester:
          $ref: "#/definitions/basic_async_retriever/creation_requester"
          request_body_json:
            reportType: GET_FLAT_FILE_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL
            marketplaceIds: '{{ [config["marketplace_id"]] }}'
            dataStartTime: "{{ stream_slice.cursor_slice.start_time }}"
            dataEndTime: "{{ stream_slice.cursor_slice.end_time }}"


    get_ledger_detail_view_data:
      type: DeclarativeStream
      name: GET_LEDGER_DETAIL_VIEW_DATA
      primary_key: [ ]
      incremental_sync:
        type: DatetimeBasedCursor
        cursor_field: Date
        cursor_datetime_formats:
          - "%Y-%m-%dT%H:%M:%SZ"
        datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        #        replication_start_date_limit_in_days = 365
        step: "P{{ min( config.get('period_in_days', 365), 365 ) }}D"
        cursor_granularity: "PT1S"
        start_datetime:
          type: MinMaxDatetime
          datetime: "{{ format_datetime(config['replication_start_date'], '%Y-%m-%dT%H:%M:%SZ') }}"
          datetime_format: "%Y-%m-%dT%H:%M:%SZ"
        end_datetime:
          type: MinMaxDatetime
          datetime: "{{ format_datetime(config.get('replication_end_date', now_utc() - duration('PT2M') ), '%Y-%m-%dT%H:%M:%SZ') }}"
          datetime_format: "%Y-%m-%dT%H:%M:%SZ"

      retriever:
        $ref: "#/definitions/basic_async_retriever"
        creation_requester:
          $ref: "#/definitions/basic_async_retriever/creation_requester"
          request_body_json:
            reportType: GET_FLAT_FILE_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL
            marketplaceIds: '{{ [config["marketplace_id"]] }}'
            dataStartTime: "{{ stream_slice.cursor_slice.start_time }}"
            dataEndTime: "{{ stream_slice.cursor_slice.end_time }}"
        record_selector:
          type: RecordSelector
          schema_normalization:
            type: CustomSchemaNormalization
            class_name: "source_amazon_seller_partner.components.type_transformers.LedgerDetailedViewReportsTypeTransformer"
          extractor:
            type: DpathExtractor
            field_path: [ ]

  basic_async_retriever:
    type: AsyncRetriever
    status_mapping:
      failed:
        - FATAL
      running:
        - IN_PROGRESS
        - IN_QUEUE
      timeout:
        - CANCELLED
      completed:
          - DONE
    urls_extractor:
      type: DpathExtractor
      field_path:
        - reportDocumentId
    record_selector:
      type: RecordSelector
      extractor:
        type: DpathExtractor
        field_path: []

    status_extractor:
      type: DpathExtractor
      field_path:
        - processingStatus
    creation_requester:
      type: HttpRequester
      path: reports/2021-06-30/reports
      url_base: "{{ config['endpoint'] }}"
      authenticator: "#/definitions/authenticator"
      http_method: POST
      request_headers:
        content-type: "application/json"
      request_body_json:
        reportType: GET_FLAT_FILE_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL # TODO: change here
        marketplaceIds: '{{ [config["marketplace_id"]] }}'
        dataStartTime: "{{ stream_slice.cursor_slice.start_time }}"
        dataEndTime: "{{ stream_slice.cursor_slice.end_time }}"

    polling_requester:
      type: HttpRequester
      path: reports/2021-06-30/reports/{{stream_slice['create_job_response'].json()['reportId']}}
      url_base: "{{ config['endpoint'] }}"
      authenticator: "#/definitions/authenticator"
      http_method: GET
      request_headers:
        content-type: "application/json"

    download_requester:
      type: HttpRequester
      path: "{{stream_slice.extra_fields['url'] }}"
      url_base: "{{ config['endpoint'] }}"
      http_method: GET
      authenticator: "#/definitions/authenticator"
      request_headers:
        Amazon-Advertising-API-Scope: "{{ stream_slice['create_job_response'].request.headers['Amazon-Advertising-API-Scope'] }}"
        Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
    download_decoder:
      type: CustomDecoder
      class_name: source_amazon_seller_partner.components.decoder.GzipCsvDecoder
    download_extractor:
      type: DpathExtractor
      field_path: []

streams:
  - $ref: "#/definitions/streams/orders"
  - $ref: "#/definitions/streams/order_items"
  - $ref: "#/definitions/streams/list_financial_event_groups"
  - $ref: "#/definitions/streams/list_financial_events"
  - $ref: "#/definitions/streams/get_flat_file_all_orders_data_by_order_date_general"
  - $ref: "#/definitions/streams/get_ledger_detail_view_data"

concurrency_level:
  type: ConcurrencyLevel
  default_concurrency: 10
  max_concurrency: 10